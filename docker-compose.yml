# Docker Compose for Sales AI Agent Platform
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sales-ai-postgres
    environment:
      POSTGRES_DB: sales_ai_agent
      POSTGRES_USER: sales_ai_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sales_ai_user -d sales_ai_agent"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sales-ai-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sales-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_123}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - sales-ai-network

  # Main Application Server
  sales-ai-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: sales-ai-server
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://sales_ai_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/sales_ai_agent
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_METRICS: true
      ENABLE_HEALTH_CHECKS: true
      ENABLE_AUTO_SCALING: true
      ENABLE_SECURITY_MONITORING: true
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - sales-ai-network

  # Lead Scoring Agent
  lead-scoring-agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_TYPE: lead-scoring
    container_name: sales-ai-lead-scoring
    environment:
      NODE_ENV: production
      AGENT_TYPE: lead-scoring
      DATABASE_URL: postgresql://sales_ai_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/sales_ai_agent
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      MAX_CONCURRENT_JOBS: 10
      QUEUE_NAME: lead-scoring
    depends_on:
      - postgres
      - redis
      - sales-ai-server
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped
    networks:
      - sales-ai-network

  # Conversation Agent
  conversation-agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_TYPE: conversation
    container_name: sales-ai-conversation
    environment:
      NODE_ENV: production
      AGENT_TYPE: conversation
      DATABASE_URL: postgresql://sales_ai_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/sales_ai_agent
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      DEEPGRAM_API_KEY: ${DEEPGRAM_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      MAX_CONCURRENT_CALLS: 50
      WEBSOCKET_PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      - postgres
      - redis
      - sales-ai-server
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped
    networks:
      - sales-ai-network

  # Email Agent
  email-agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_TYPE: email
    container_name: sales-ai-email
    environment:
      NODE_ENV: production
      AGENT_TYPE: email
      DATABASE_URL: postgresql://sales_ai_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/sales_ai_agent
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      MAX_CONCURRENT_EMAILS: 100
      QUEUE_NAME: email-processing
    depends_on:
      - postgres
      - redis
      - sales-ai-server
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    restart: unless-stopped
    networks:
      - sales-ai-network

  # Forecasting Agent
  forecasting-agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
      args:
        AGENT_TYPE: forecasting
    container_name: sales-ai-forecasting
    environment:
      NODE_ENV: production
      AGENT_TYPE: forecasting
      DATABASE_URL: postgresql://sales_ai_user:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/sales_ai_agent
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_123}@redis:6379
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      ENABLE_ML_MODELS: true
      PREDICTION_CACHE_TTL: 3600
    depends_on:
      - postgres
      - redis
      - sales-ai-server
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    restart: unless-stopped
    networks:
      - sales-ai-network

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: sales-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - sales-ai-server
    restart: unless-stopped
    networks:
      - sales-ai-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: sales-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - sales-ai-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: sales-ai-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_password_123}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - sales-ai-network

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: sales-ai-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - sales-ai-network

  # Elasticsearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: sales-ai-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - sales-ai-network

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: sales-ai-kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - sales-ai-network

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: sales-ai-logstash
    ports:
      - "5044:5044"
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./monitoring/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - sales-ai-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  sales-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16